import pyaudio
import wave
import sounddevice as sd
import librosa
import librosa.display
from matplotlib import pyplot as plt
from matplotlib.pyplot import specgram
import numpy as np
import tensorflow as tf

raw = []
np.set_printoptions(threshold=np.inf)
X_out, sr = librosa.load("100Hz_44100Hz_16bit_05sec.wav", duration=0.1)
print("Sampling rate: ", sr)
raw.append(X_out)
raw_sound = np.array(X_out)
f = open('output.txt','w')
f.write(str(raw_sound[0:]))

#print(raw_sound)

# fig = plt.figure(figsize=(25,60), dpi = 900)

# plt.subplot(2, 1, 1)
# specgram(raw_sound, Fs=22050)
# plt.suptitle("Figure 1: Spectrogram",x=0.5, y=0.915,fontsize=18)
#
# # fig = plt.figure(figsize=(25,60), dpi = 900)
# plt.subplot(2, 1, 2)
# librosa.display.waveplot(raw_sound, sr=11025)
# plt.suptitle("Figure 2: Waveplot",x=0.5, y=0.915,fontsize=18)
#
# plt.show()


def extract_feature(file_name):
    X, sample_rate = librosa.load(file_name)
    stft = np.abs(librosa.stft(X))
    mfccs = np.mean(librosa.feature.mfcc(y=X, sr=sample_rate, n_mfcc=40).T,axis=0)
    chroma = np.mean(librosa.feature.chroma_stft(S=stft, sr=sample_rate).T,axis=0)
    mel = np.mean(librosa.feature.melspectrogram(X, sr=sample_rate).T,axis=0)
    contrast = np.mean(librosa.feature.spectral_contrast(S=stft, sr=sample_rate).T,axis=0)
    tonnetz = np.mean(librosa.feature.tonnetz(y=librosa.effects.harmonic(X), sr=sample_rate).T,axis=0)
    return mfccs,chroma,mel,contrast,tonnetz


def preprocess():
    mfccs, chroma, mel, contrast, tonnetz = extract_feature("100Hz_44100Hz_16bit_05sec.wav")
    print(mfccs.shape, chroma.shape, mel.shape, contrast.shape, tonnetz.shape)
    print(chroma)
    features, labels = np.empty((0,193)), np.empty(0)
    ext_features = np.hstack([mfccs,chroma,mel,contrast,tonnetz])
    features = np.vstack([features, ext_features])
    learning_rate = 0.0001


preprocess()


def ConvNet(features):
    s = np.array(features)
    n_dim = s.shape[1]
    print(s.shape[0])
    n_classes = 10
    n_hidden_units_one = 280
    n_hidden_units_two = 300
    sd = 1 / np.sqrt(n_dim)

    X = tf.placeholder(tf.float32,[None,n_dim])
    Y = tf.placeholder(tf.float32,[None,n_classes])

    W_1 = tf.Variable(tf.random_normal([n_dim,n_hidden_units_one], mean=0, stddev=sd))
    b_1 = tf.Variable(tf.random_normal([n_hidden_units_one], mean=0, stddev=sd))
    h_1 = tf.nn.tanh(tf.matmul(X,W_1) + b_1)

    W_2 = tf.Variable(tf.random_normal([n_hidden_units_one,n_hidden_units_two], mean=0, stddev=sd))
    b_2 = tf.Variable(tf.random_normal([n_hidden_units_two], mean = 0, stddev=sd))
    h_2 = tf.nn.sigmoid(tf.matmul(h_1,W_2) + b_2)

    W = tf.Variable(tf.random_normal([n_hidden_units_two,n_classes], mean=0, stddev=sd))
    b = tf.Variable(tf.random_normal([n_classes], mean = 0, stddev=sd))
    y_ = tf.nn.softmax(tf.matmul(h_2,W) + b)

    init = tf.initialize_all_variables()
