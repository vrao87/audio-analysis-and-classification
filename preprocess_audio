import pyaudio
import wave
import sounddevice as sd
import librosa
import librosa.display
from matplotlib import pyplot as plt
from matplotlib.pyplot import specgram
import numpy as np

raw = []
np.set_printoptions(threshold=np.inf)
X, sr = librosa.load("100Hz_44100Hz_16bit_05sec.wav", duration=0.1)
raw.append(X)
raw_sound = np.array(X)
f = open('output.txt','w')
f.write(str(raw_sound[0:]))

#print(raw_sound)

# fig = plt.figure(figsize=(25,60), dpi = 900)
plt.subplot(2, 1, 1)
specgram(raw_sound, Fs=22050)
plt.suptitle("Figure 1: Spectrogram",x=0.5, y=0.915,fontsize=18)

# fig = plt.figure(figsize=(25,60), dpi = 900)
plt.subplot(2, 1, 2)
librosa.display.waveplot(raw_sound, sr=11025)
plt.suptitle("Figure 2: Waveplot",x=0.5, y=0.915,fontsize=18)

plt.show()



def extract_feature(file_name):
    X, sample_rate = librosa.load(file_name)
    stft = np.abs(librosa.stft(X))
    mfccs = np.mean(librosa.feature.mfcc(y=X, sr=sample_rate, n_mfcc=40).T,axis=0)
    chroma = np.mean(librosa.feature.chroma_stft(S=stft, sr=sample_rate).T,axis=0)
    mel = np.mean(librosa.feature.melspectrogram(X, sr=sample_rate).T,axis=0)
    contrast = np.mean(librosa.feature.spectral_contrast(S=stft, sr=sample_rate).T,axis=0)
    tonnetz = np.mean(librosa.feature.tonnetz(y=librosa.effects.harmonic(X), sr=sample_rate).T,axis=0)
    return mfccs,chroma,mel,contrast,tonnetz

def preprocess():
    mfccs,chroma,mel,contrast,tonnetz = extract_feature("100Hz_44100Hz_16bit_05sec.wav")
    print(mfccs.shape, chroma.shape, mel.shape)
    print(chroma)

preprocess()
